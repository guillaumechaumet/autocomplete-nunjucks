'.text.html.nunjucks':
  'editor':
    'commentStart': '{# '
    'commentEnd': ' #}'
  # 'autocomplete':
  #   'symbols':
  #     'tag':
  #       'selector': '.tag'
  #       'typePriority': 3

'.text.html.nunjucks':
  'autocomplete':
    'symbols':
      'builtins':
        'suggestions': [{
          # Expressions
          'type': 'tag'
          'snippet': 'and'
          'description': 'Logical and operator.'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#logic'
        }, {
          'type': 'tag'
          'snippet': 'or'
          'description': 'Logical or operator.'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#logic'
        }, {
          'type': 'tag'
          'snippet': 'not'
          'description': 'Logical not operator.'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#logic'
        # Autoescaping see http://mozilla.github.io/nunjucks/templating.html#autoescaping
        }, {
          'type': 'tag'
          'snippet': 'safe'
          'description': 'If autoescaping is turned on in the environment, all output will automatically be escaped for safe output. To manually mark output as safe, use the safe filter.'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#autoescaping'
        }, {
          'type': 'tag'
          'snippet': 'escape'
          'description': 'If autoescaping is turned off, all output will be rendered as it is. You can manually escape variables with the escape filter.'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#autoescaping'
        # Global Functions see http://mozilla.github.io/nunjucks/templating.html#global-functions
        }, {
          'type': 'method'
          'snippet': 'range(${1:start}, ${2:stop}, ${3:step})'
          'description': 'range([start], stop, [step]) If you need to iterate over a fixed set of numbers, range generates the set for you. The numbers begin at start (default 0) and increment by step (default 1) until it reaches stop, not including it.'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#range-start-stop-step'
        }, {
          'type': 'method'
          'snippet': 'cycler(${1:item1}, ${2:itemN})'
          'description': 'An easy way to rotate through several values is to use cycler, which takes any number of arguments and cycles through them.'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#cycler-item1-item2-itemn'
        }, {
          'type': 'method'
          'snippet': 'joiner()'
          'description': 'When combining multiple items, it\'s common to want to delimit them with something like a comma, but you don\'t want to output the separator for the first item. The joiner class will output separator (default ",") whenever it is called except for the first time'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#joiner-separator'
        # Builtin Filters http://mozilla.github.io/nunjucks/templating.html#builtin-filters
        }, {
          'type': 'builtin'
          'snippet': 'default(${1:value}, {2:default}, {3:boolean})'
          'description': 'If value is strictly undefined, return default, otherwise value. If boolean is true, any JavaScript falsy value will return default (false, "", etc). Also, aliased as d'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#default-value-default-boolean'
        }, {
          'type': 'builtin'
          'snippet': 'sort({1:arr}, {2:reverse}, {3:caseSens}, {4:attr})'
          'description': 'Sort arr with JavaScript\'s arr.sort function. If reverse is true, result will be reversed. Sort is case-insensitive by default, but setting caseSens to true makes it case-sensitive. If attr is passed, will compare attr from each item.'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#sort-arr-reverse-casesens-attr'
        }, {
          'type': 'builtin'
          'snippet': 'striptags({1:value}, {2:preserve_linebreaks})'
          'description': 'Analog of jinja\'s striptags. If preserve_linebreaks is false (default), strips SGML/XML tags and replaces adjacent whitespace with one space. If preserve_linebreaks is true, normalizes whitespace, trying to preserve original linebreaks. Use second behavior if you want to pipe {{ text | striptags | nl2br }}. Use default one otherwise.'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#striptags-value-preserve_linebreaks'
        }, {
          'type': 'builtin'
          'snippet': 'dump({1:object})'
          'description': 'Call JSON.stringify on an object and dump the result into the template. Useful for debugging: {{ foo | dump }}.'
          'descriptionMoreURL': 'http://mozilla.github.io/nunjucks/templating.html#dump-object'
        }]
        # More Filters
        # 'Name':
        #   'type': 'tag'
        #   'snippet': ''
        #   'description': ''
        #   'descriptionMoreURL': ''
